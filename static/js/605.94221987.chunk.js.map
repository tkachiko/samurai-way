{"version":3,"file":"static/js/605.94221987.chunk.js","mappings":"gLACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA2G,0BCA3G,GAAgB,OAAS,2BAA2B,WAAa,gC,mBCgBjE,EARyD,SAACA,GACxD,OACE,gBAAKC,UAAS,UAAKC,EAAAA,OAAL,YAAsBA,EAAAA,QAApC,UACE,SAAC,KAAD,CAASC,GAAE,mBAAcH,EAAMI,IAAMC,gBAAiBH,EAAAA,WAAtD,SAA0EF,EAAMM,UCXtF,KCaA,EAN4C,SAACN,GAC3C,OACE,gBAAKC,UAAWC,EAAAA,OAAhB,SAAgCF,EAAMO,W,oBCC7BC,EAAuC,SAACR,GACnD,OAGIS,EAAAA,EAAAA,IAAsB,CACxBC,cAAe,CACbC,eAAgB,MAJlBC,EADF,EACEA,SACAC,EAFF,EAEEA,aAWF,OAAO,kBAAMC,SAAUD,GAJuB,SAACE,GAC7Cf,EAAMc,SAASC,MAGV,WACL,uCAAcH,EAAS,mBAAvB,IACUI,YAAa,wBAEvB,mBAAQC,KAAM,SAAUC,MAAO,CAACC,MAAO,OAAQC,OAAQ,OAAQC,UAAW,OAA1E,sB,mBCLJ,GAAeC,E,QAAAA,KACbC,EAAAA,EAAAA,KAPsB,SAACC,GACvB,MAAO,CACLC,YAAaD,EAAMC,eAKI,CAACC,YAAAA,EAAAA,KAC1BC,EAAAA,EAFF,ECjBmD,SAAC3B,GAClD,IAAM4B,EAAkB5B,EAAMyB,YAAYI,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYzB,KAAMyB,EAAEzB,KAAMF,GAAI2B,EAAE3B,IAAS2B,EAAE3B,OAChG4B,EAAmBhC,EAAMyB,YAAYQ,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAS3B,QAAS2B,EAAE3B,QAASH,GAAI8B,EAAE9B,IAAS8B,EAAE9B,OAM3G,OACE,iBAAKH,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAsC0B,KACtC,gBAAK3B,UAAWC,EAAhB,SAAkC8B,KAClC,SAACxB,EAAD,CAAiBM,SARC,SAACC,GACrBf,EAAM0B,YAAYX,EAAKJ,0B,gICHrBwB,EAAkB,SAACX,GAAD,MAA8C,CACpEY,OAAQZ,EAAMa,KAAKD,SAGd,SAAST,EAAoBW,GAalC,OAFuDf,EAAAA,EAAAA,IAAQY,EAARZ,EATvD,SAA2BvB,GACzB,IAAOoC,EAAwBpC,EAAxBoC,OAAWG,GAAlB,OAA+BvC,EAA/B,GAEA,OAAKoC,GAGE,SAACE,GAAD,UAAeC,KAFb,SAAC,KAAD,CAAUpC,GAAI","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-network/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/SendMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"messages\":\"Dialogs_messages__Cg2l+\",\"active\":\"Dialogs_active__t8cjl\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__gU34-\",\"activeLink\":\"DialogItem_activeLink__5QKd0\"};","import React from 'react';\nimport styles from './DialogItem.module.css'\nimport {NavLink} from 'react-router-dom';\n\ntype DialogItemPropsType = {\n  id: string\n  name: string\n}\n\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\n  return (\n    <div className={`${styles.dialog} ${styles.active}`}>\n      <NavLink to={`/dialogs/${props.id}`} activeClassName={styles.activeLink}>{props.name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport styles from './Message.module.css';\n\ntype MessagePropsType = {\n  message: string\n  id: string\n}\n\nconst Message: React.FC<MessagePropsType> = (props) => {\n  return (\n    <div className={styles.dialog}>{props.message}</div>\n  );\n};\n\nexport default Message;","import React from 'react'\nimport {SubmitHandler, useForm} from 'react-hook-form'\n\ntype PropsType = {\n  onSubmit: (data: FormDataType) => void\n}\n\nexport type FormDataType = {\n  newMessageBody: string\n}\n\nexport const SendMessageForm: React.FC<PropsType> = (props) => {\n  const {\n    register,\n    handleSubmit,\n  } = useForm<FormDataType>({\n    defaultValues: {\n      newMessageBody: '',\n    },\n  })\n\n  const onSubmit: SubmitHandler<FormDataType> = (data) => {\n    props.onSubmit(data)\n  }\n\n  return <form onSubmit={handleSubmit(onSubmit)}>\n    <textarea {...register('newMessageBody')}\n              placeholder={'Enter you message'}\n    />\n    <button type={'submit'} style={{width: '50px', height: '30px', alignSelf: 'end'}}>Send\n    </button>\n  </form>\n}","import {DialogsPageType, sendMessage} from '../../redux/dialogs-reducer'\nimport {Dialogs} from './Dialogs'\nimport {connect} from 'react-redux'\nimport {RootStateType} from '../../redux/redux-store'\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect'\nimport {compose} from 'redux'\nimport {ComponentType} from 'react'\n\ntype MapStateToPropsType = {\n  dialogsPage: DialogsPageType\n}\n\ntype MapDispatchToPropsType = {\n  sendMessage: (newMessageBody: string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n  return {\n    dialogsPage: state.dialogsPage,\n  }\n}\n\nexport default compose<ComponentType>(\n  connect(mapStateToProps, {sendMessage}),\n  WithAuthRedirect,\n)(Dialogs)","import React from 'react'\nimport styles from './Dialogs.module.css'\nimport DialogItem from './DialogItem/DialogItem'\nimport Message from './Message/Message'\nimport {DialogsPropsType} from './DialogsContainer'\nimport {FormDataType, SendMessageForm} from './SendMessageForm'\n\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\n  const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id} />)\n  const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} id={m.id} key={m.id} />)\n\n  const addNewMessage = (data: FormDataType) => {\n    props.sendMessage(data.newMessageBody)\n  }\n\n  return (\n    <div className={styles.dialogs}>\n      <div className={styles.dialogsItems}>{dialogsElements}</div>\n      <div className={styles.messages}>{messagesElements}</div>\n      <SendMessageForm onSubmit={addNewMessage} />\n    </div>\n  )\n}","import {Redirect} from 'react-router-dom';\nimport React, {ComponentType} from 'react';\nimport {RootStateType} from '../redux/redux-store';\nimport {connect} from 'react-redux';\n\ntype MapStatePropsType = {\n  isAuth: boolean\n}\n\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\n\n  function RedirectComponent(props: MapStatePropsType) {\n    const {isAuth, ...restProps} = props;\n\n    if (!isAuth) {\n      return <Redirect to={'/login'}/>;\n    }\n    return <Component {...restProps as T}/>;\n  }\n\n  let ConnectedAuthRedirectComponent: ComponentType<T> = connect(mapStateToProps)(RedirectComponent);\n\n  return ConnectedAuthRedirectComponent;\n}"],"names":["props","className","styles","to","id","activeClassName","name","message","SendMessageForm","useForm","defaultValues","newMessageBody","register","handleSubmit","onSubmit","data","placeholder","type","style","width","height","alignSelf","compose","connect","state","dialogsPage","sendMessage","WithAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}